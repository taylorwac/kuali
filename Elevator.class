<?


class Elvevator{
   private i$startFloor;
   private  $endFloor;
   private  $currentFloor;
   priavate  $doorStatus;
   private  occupied = false;
   priave   stops = array();
   private  interrupt = false;
   private  isAvailable = true;

   _constructor($startFloor, $endFloor){
      $this->startFloor = $startFloor;
      $this->endFloor = $endFloor;
   }

   public function isAvailable(){
      return $this->isAvailable;
   }

   public function isOccupied(){
      return $this->occupied;
   }

   function reportFloor(){
       array($this.startFloor,$currentFloor $this.endFloor);
   }

   function go($startFloor,$endFloor){
     $this->trips[]=array($startFloor,$endFloor);
     $this->checkTrips();
     $this->startFloor = $startFloor;
     $this->endFloor = $endFloor;
     $this->moveToFloor($startFloor);
     $this->getPassenger();
     $this->moveToFloor($endFloor);
   }
   
   function checkTrips(){
      if(count($this->trips)>$this->maxTrips)){
         $this->available = false;
      }
   }

   function getPassenger(){
     $this->openDoor();
     this->occupied =true;
     $this->closeDoor();
   }

   function interrupt($startFloor, $endFloor){
      $this->interrupt = true;
      while($this->interupt){
         sleep(1);
      }
      $this->addStop($startFloor,$endFloor);
      
   }

   function addStop($startFloor, $endFloor){
      $this->addStop($startFloor);
      if($endFloor > $this->endFloor){
         $this->addSTop($this->endFloor)
         $endFloor;
      }else{
         $this->addStop($endFloor);
         $endFloor = $this->endFloor;
      }
      $this->go($this->currentFloor,$endFloor);
   }

   function moveToFloor($startFloor){
      while($currentFloor !=$startFloor){
         if($this->interrupt){
            $this->interrupt = false;
            break;
         }
         if(in_array($currentFloor,$this->stops){
            $this->getPasenger();
            $this->removeStop($currentFloor);
         }else{
            $this->passedFloor[]=$currentFloor;
         }
         if($currentFloor <!$startFloor){
            $currentFloor += 1;
         }else{
            $currentFloor -= 1;
         }
         $this->reportFloor();
      }
   }

   function removeStop($floor){
      foreach($this->stops as $i = $stop){
         if($stop) == $floor)
            unset($this->stops[$i]);
      }
   }

   private function openDoor(){
      $this->doorStatus='open';
      $this->reportDoorStatus();
   }

   private function closeDoor(){
      $this->doorStatus = 'close';
      $this->reportDoorStatus();
   }
   
   function reportDoorStatus(){
      return $this->doorStatus;
   }
 
}
